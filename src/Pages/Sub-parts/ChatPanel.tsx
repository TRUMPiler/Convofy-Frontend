import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Client } from "@stomp/stompjs";
import { toast } from "sonner";
import Cookies from "js-cookie"; // Ensure Cookies is imported if needed for JWT inside ChatPanel

interface CallChatMessage {
    id: string;
    senderId: string;
    senderName: string;
    senderAvatar: string;
    content: string;
    timestamp: string;
}

interface ChatPanelProps {
    isOpen: boolean;
    onClose: () => void;
    meetingId: string;
    currentUserId: string | undefined;
    currentUserName: string;
    currentUserAvatar: string;
    jwtToken: string | undefined;
    stompClientRef: React.MutableRefObject<Client | null>;
    isStompConnected: boolean; // New prop for connection status
}

const ChatPanel: React.FC<ChatPanelProps> = ({
    isOpen,
    onClose,
    meetingId,
    currentUserId,
    currentUserName,
    currentUserAvatar,
    jwtToken,
    stompClientRef,
    isStompConnected // Destructure new prop
}) => {
    const [callMessages, setCallMessages] = useState<CallChatMessage[]>([]);
    const [newChatMessage, setNewChatMessage] = useState<string>('');
    const chatMessagesEndRef = useRef<HTMLDivElement>(null);

    // Scroll to the bottom of the chat when new messages arrive or chat opens
    useEffect(() => {
        if (isOpen) {
            chatMessagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
        }
    }, [callMessages, isOpen]);

    // WebSocket subscription for chat messages, now inside ChatPanel
    useEffect(() => {
        // Only attempt to subscribe if STOMP client is connected and essential data is available
        if (!isStompConnected || !meetingId || !jwtToken || !stompClientRef.current) {
            console.warn("ChatPanel: Not subscribing to chat. STOMP not connected or missing essential data.");
            return;
        }

        const client = stompClientRef.current;

        // Subscribe to the meeting chat topic
        const subscription = client.subscribe(`/topic/meeting-chat/${meetingId}`, (message) => {
            try {
                const receivedMessage: CallChatMessage = JSON.parse(message.body);
                console.log("ChatPanel: Received new chat message:", receivedMessage);
                setCallMessages((prevMessages) => [...prevMessages, receivedMessage]);
            } catch (error) {
                console.error("ChatPanel: Error parsing chat WebSocket message:", error);
            }
        }, { Authorization: `Bearer ${jwtToken}` });

        return () => {
            // Unsubscribe when component unmounts or dependencies change
            if (subscription) {
                subscription.unsubscribe();
                console.log("ChatPanel: Unsubscribed from meeting chat topic.");
            }
        };
    }, [meetingId, jwtToken, stompClientRef, isStompConnected]); // Add isStompConnected to dependencies

    const handleSendChatMessage = useCallback(() => {
        if (!newChatMessage.trim() || !meetingId || !stompClientRef.current || !stompClientRef.current.active || !isStompConnected) {
            toast.error('Cannot send message: Chat service not connected.');
            return;
        }

        if (!jwtToken) {
            toast.error('Authentication required to send chat messages.');
            return;
        }

        const messagePayload: CallChatMessage = {
            id: crypto.randomUUID(), // ID generated by frontend for optimistic UI or unique key
            senderId: currentUserId || "unknown",
            senderName: currentUserName,
            senderAvatar: currentUserAvatar,
            content: newChatMessage.trim(),
            timestamp: new Date().toISOString(),
        };

        // Publish the message using the STOMP client
        stompClientRef.current.publish({
            destination: `/app/meeting.sendMessage/${meetingId}`,
            headers: { Authorization: `Bearer ${jwtToken}` },
            body: JSON.stringify(messagePayload)
        });

        setNewChatMessage(''); // Clear input after sending
    }, [newChatMessage, meetingId, currentUserId, currentUserName, currentUserAvatar, jwtToken, stompClientRef, isStompConnected]);

    const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {
        if (e.key === 'Enter') {
            e.preventDefault(); // Prevent default form submission behavior
            handleSendChatMessage();
        }
    };

    return (
        <div className={`fixed inset-y-0 right-0 z-50 bg-gray-700 shadow-xl flex flex-col transition-all duration-300 ease-in-out
                        ${isOpen ? 'w-full md:w-80 opacity-100 visible' : 'w-0 opacity-0 invisible'}`}>
            <div className="p-3 bg-gray-800 rounded-t-lg flex items-center justify-between flex-shrink-0">
                <h4 className="text-lg font-semibold text-white">In-Call Chat</h4>
                <button onClick={onClose} className="text-gray-400 hover:text-white p-1 rounded-full hover:bg-gray-600 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                </button>
            </div>
            <div className="flex-grow overflow-y-auto p-3 space-y-3 custom-scrollbar">
                {callMessages.length === 0 ? (
                    <p className="text-center text-gray-400 text-sm mt-4">No messages yet. Say hello!</p>
                ) : (
                    callMessages.map((msg) => {
                        const isOwnMessage = msg.senderId === currentUserId;
                        return (
                            <div key={msg.id} className={`flex items-start ${isOwnMessage ? 'justify-end' : 'justify-start'} space-x-2`}>
                                {!isOwnMessage && (
                                    <img
                                        src={msg.senderAvatar || 'https://placehold.co/40x40/cccccc/333333?text=U'}
                                        alt={msg.senderName}
                                        className="w-8 h-8 rounded-full object-cover flex-shrink-0"
                                        referrerPolicy='no-referrer'
                                    />
                                )}
                                <div className={`flex flex-col ${isOwnMessage ? 'items-end' : 'items-start'} max-w-[70%]`}>
                                    <span className={`text-xs ${isOwnMessage ? 'text-gray-400' : 'text-gray-300'}`}>
                                        {isOwnMessage ? 'You' : msg.senderName}
                                    </span>
                                    <div className={`rounded-lg px-3 py-2 text-sm break-words ${isOwnMessage ? 'bg-blue-500 text-white' : 'bg-gray-600 text-white'}`}>
                                        {msg.content}
                                    </div>
                                    <span className="text-xs text-gray-400 mt-1">
                                        {new Date(msg.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                                    </span>
                                </div>
                                {isOwnMessage && (
                                    <img
                                        src={currentUserAvatar || 'https://placehold.co/40x40/cccccc/333333?text=You'}
                                        alt="You"
                                        className="w-8 h-8 rounded-full object-cover flex-shrink-0"
                                        referrerPolicy='no-referrer'
                                    />
                                )}
                            </div>
                        );
                    })
                )}
                <div ref={chatMessagesEndRef} />
            </div>
            <div className="p-3 bg-gray-800 rounded-b-lg flex-shrink-0">
                <form onSubmit={(e) => { e.preventDefault(); handleSendChatMessage(); }} className="flex space-x-2">
                    <input
                        type="text"
                        value={newChatMessage}
                        onChange={(e) => setNewChatMessage(e.target.value)}
                        onKeyPress={handleKeyPress}
                        placeholder="Type a message..."
                        className="flex-grow p-2 rounded-lg bg-gray-700 border border-gray-600 text-white focus:outline-none focus:ring-1 focus:ring-blue-500"
                    />
                    <button
                        type="submit"
                        className="p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center justify-center"
                        disabled={!newChatMessage.trim() || !isStompConnected} // Disable if not connected
                    >
                        {/* Send Button Image Icon */}
                        <img width="24" height="24" src="https://img.icons8.com/material-sharp/24/sent.png" alt="Send" />
                    </button>
                </form>
            </div>
        </div>
    );
};

export default ChatPanel;
